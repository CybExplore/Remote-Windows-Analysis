# Generated by Django 5.2 on 2025-05-06 19:52

import accounts.manager
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sid', models.CharField(db_index=True, help_text='Windows Security Identifier (primary key)', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid SID format. Must match Windows SID pattern (e.g., S-1-5-21-<domain>-<RID>).', regex='^S-1-5-21-\\d+-\\d+-\\d+-\\d+$')])),
                ('email', models.EmailField(db_index=True, help_text='Verified email address (lowercase)', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('password_changed', models.BooleanField(default=False, help_text='Has the user changed their temporary password?')),
                ('account_meta', models.JSONField(blank=True, default=dict, help_text='Stores Windows account attributes like sid_type, domain, etc.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Windows User',
                'verbose_name_plural': 'Windows Users',
            },
            managers=[
                ('objects', accounts.manager.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('password_change', 'Password Change'), ('token_issued', 'Token Issued')], max_length=50)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='OAuth2Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.CharField(max_length=255, unique=True)),
                ('refresh_token', models.CharField(blank=True, max_length=255, null=True)),
                ('expires_at', models.DateTimeField()),
                ('scope', models.CharField(default='read write', max_length=255)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('revoked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hashed_password', models.CharField(max_length=128)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Password Histories',
                'ordering': ['-changed_at'],
                'get_latest_by': 'changed_at',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('locked_out', models.BooleanField(default=False)),
                ('lockout_time', models.DateTimeField(blank=True, null=True)),
                ('logon_count', models.IntegerField(default=0)),
                ('password_expires', models.DateTimeField(blank=True, null=True)),
                ('password_last_set', models.DateTimeField(blank=True, null=True)),
                ('user_may_change_password', models.BooleanField(default=True)),
                ('client_id', models.CharField(blank=True, db_index=True, max_length=100, null=True, unique=True)),
                ('client_secret', models.CharField(blank=True, max_length=100, null=True)),
                ('last_logon', models.DateTimeField(blank=True, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Extended profile attributes')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='accounts_cu_email_5ce40b_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['sid'], name='accounts_cu_sid_751a15_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['-timestamp'], name='accounts_au_timesta_40aa9a_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user'], name='accounts_au_user_id_2e9d8e_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action'], name='accounts_au_action_5ca9a9_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['ip_address'], name='accounts_au_ip_addr_8bfa9d_idx'),
        ),
        migrations.AddIndex(
            model_name='oauth2token',
            index=models.Index(fields=['access_token'], name='accounts_oa_access__ad0d9f_idx'),
        ),
        migrations.AddIndex(
            model_name='oauth2token',
            index=models.Index(fields=['user', 'expires_at'], name='accounts_oa_user_id_250fc1_idx'),
        ),
    ]
