# Generated by Django 5.2.1 on 2025-05-24 00:06

import accounts.manager
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=500)),
                ('sid', models.CharField(db_index=True, help_text='Windows Security Identifier (primary key)', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid SID format. Must match Windows SID pattern (e.g., S-1-5-21-<domain>-<RID>).', regex='^S-1-5-21-\\d+-\\d+-\\d+-\\d+$')])),
                ('email', models.EmailField(db_index=True, help_text='Verified email address (lowercase)', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('password_changed', models.BooleanField(default=False, help_text='Has the user changed their temporary password?')),
                ('is_active', models.BooleanField(default=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Windows User',
                'verbose_name_plural': 'Windows Users',
            },
            managers=[
                ('objects', accounts.manager.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('secret_id', models.CharField(max_length=128)),
                ('sid', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clients', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(max_length=100)),
                ('event_id', models.IntegerField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('details', models.JSONField(blank=True, null=True)),
                ('anomaly_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='accounts.client')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hashed_password', models.CharField(max_length=128)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Password Histories',
                'ordering': ['-changed_at'],
                'get_latest_by': 'changed_at',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(blank=True, max_length=255, null=True)),
                ('account_type', models.IntegerField(blank=True, null=True)),
                ('local_account', models.BooleanField(default=True)),
                ('password_changeable', models.BooleanField(default=True)),
                ('password_expires', models.BooleanField(default=False)),
                ('password_required', models.BooleanField(default=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.JSONField(default=list)),
                ('profile_local_path', models.CharField(blank=True, max_length=255, null=True)),
                ('profile_last_use_time', models.DateTimeField(blank=True, null=True)),
                ('profile_status', models.IntegerField(blank=True, null=True)),
                ('sessions', models.JSONField(default=list)),
                ('environment', models.JSONField(default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='accounts_cu_email_5ce40b_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['sid'], name='accounts_cu_sid_751a15_idx'),
        ),
        migrations.AddIndex(
            model_name='logentry',
            index=models.Index(fields=['event_type', 'timestamp'], name='accounts_lo_event_t_78dcaa_idx'),
        ),
        migrations.AddIndex(
            model_name='logentry',
            index=models.Index(fields=['user', 'timestamp'], name='accounts_lo_user_id_b0379d_idx'),
        ),
        migrations.AddIndex(
            model_name='logentry',
            index=models.Index(fields=['client', 'timestamp'], name='accounts_lo_client__a5903b_idx'),
        ),
    ]
